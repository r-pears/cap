// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @default(cuid()) @id
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now())
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @default(cuid()) @id
  title     String
  content   String
  author    User   @relation(fields: [authorId], references: [id])
  authorId  String
  image     String?
  comments  Comment[]
  votes     Vote[]
}

model Comment {
  id        String   @default(cuid()) @id
  title     String
  content   String
  author    User   @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
}

model Vote {
  id        String   @default(cuid()) @id
  author    User   @relation(fields: [authorId], references: [id])
  authorId  String
  vote      Int
  post      Post   @relation(fields: [postId], references: [id])
  postId    String
}

